This project creates a simple REST server that you can use to communicate with
MCollective (rpc communication).

You can reach MCollective with URLs like :

POST on http://yourserver:4567/mcollective/rpcutil/ping/ # Sinatra standalone
POST on http://yourserver/mcollective/rpcutil/ping/ # Passenger

Depending on if you use Sinatra as a standalone service or through Apache and
Passenger.

The syntax is /mcollective/agent/action/ with a POST request

Examples of use:

POST on http://yourserver/mcollective/rpcutil/ping/, 
With Content-Type = "application/json", 
With POST body = {"filters":{"identity":["el5.labolinux.fr","el6.labolinux.fr"]}}

POST on http://yourserver/mcollective/rpcutil/ping/
With Content-Type = "application/json"
With POST body = {"filters":{"fact":["rubyversion=1.8.7"]}}

POST on http://yourserver/mcollective/rpcutil/ping/
With Content-Type = "application/json"
With POST body = {"limit":{"method":"random","targets":1},"filters":{}}

POST on http://yourserver/mcollective/package/status/
With Content-Type = "application/json"
With POST body = {"filters":{"class":["postgresql-server"]},"parameters":{"package":"postgresql"}}

POST on http://yourserver/mcollective/package/status/
With Content-Type = "application/json"
With POST body = {"filters":{"compound":"(operatingsystem=CentOS and !operatingsystemrelease=6.3)"},"parameters":{"package":"bash"}}

POST on http://yourserver/mcollective/service/status/, 
With Content-Type = "application/json", 
With POST body = {"filters":{"identity":["el5.labolinux.fr"],"class":["postgresql-server"]},"parameters":{"service":"sshd"}}

To execute this script you'll need to install some packages on your machine :

rubygem-sinatra : a light webserver in ruby
rubygem-json    : used to format the response
rubygem-daemons : to daemonize the server 

You'll find the packages on http://www.kermit.fr/repo/rpm/ 

Considering that inside the rest server we call mcollective, it is necessary
to install and launch it on a machine on which mcollective is installed and
configured (at least as a client).

See http://kermit.fr/kermit/doc/ 

Run the server, for testing, with :

ruby mc-rpc-restserver-control.rb start

Test the service on the URL :

http://yourserver:4567/mcollective/rpcutil/ping/

You can then deploy the application with Apache and Phusion Passenger
(or keep the mc-rpc-restserver-control.rb daemonizer).

It has been tested on el5 with ruby 1.8.6 with these packages :

mod_passenger-3.0.8-1.el5.x86_64.rpm
rubygem-passenger-3.0.8-1.el5.x86_64.rpm
rubygem-passenger-native-3.0.8-1.el5.x86_64.rpm
rubygem-passenger-native-libs-3.0.8-1.el5_1.8.6.399.x86_64.rpm

You'll find the packages on http://www.kermit.fr/repo/rpm/ 

Check the configuration example for Apache under misc/httpd.conf

Don't forget the configuration for selinux if it is set in enforcing mode.
For example, if you put the application in /var/www/restmco :
grep httpd /var/log/audit/audit.log | audit2allow -M passenger
semodule -i passenger.pp
semanage fcontext -a -t httpd_sys_content_t "/var/www/restmco(/.*)?" 
restorecon -R /var/www/
ls -ldZ /var/www/restmco/*

